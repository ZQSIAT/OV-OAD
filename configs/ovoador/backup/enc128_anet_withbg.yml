_base_: '../default.yml'
model_name: 'ovoador' # display name in the logger
use_nvideos: -1 # total: 14950, -1 means use all videos 
output: /mnt/petrelfs/heyinan/00_zqs/data/exps/anet_enc128_T_adapter_e30_matchingloss_lre5_withbg # not only verb template
device: cuda
debug: False
print_freq: 100
single_eval: false

data:
  with_dc: False
  train: 
    root_dir: 'phdd:s3://anet_extc_feats_4fps/CLIP_ViT_B_16_768/'
    meta_file: '/mnt/petrelfs/heyinan/00_zqs/code/ovoad/extract_features/data_list/new_data_info.json'
    anno_file: '/mnt/petrelfs/heyinan/00_zqs/data/anet/anno'
    read_from: petrel
    use_nvideos: ${use_nvideos} 
    nonzero: 0  
    enc_steps: 128 # 128
    dec_steps: 8
    caption_pick: 'random'
    use_dali: True
    batch_size: 256  # 256
    input_size: 224
    test_resize: 256
    verb_aug: false
    verb_filter: false # 剔除不包含verb的caption, 似乎没用
    image_reader:
          type: pil
    sampler:
          type: distributed_epoch
    transforms:
          type: STANDARD
    use_ranked: False
    
    use_entity: ${model.use_entityloss}
    mask_type: verb  # dobj / verb 预测动词或动宾短语
    use_distilbert: True

  text_aug:
    max_seq_len: 77
    multi_label: 0 # we use multi-label contrastive 
    word_type: 'verb'

  val:
      type: clip
      read_from: petrel
      use_dali: True
      batch_size: 64
      num_workers: 4
      pin_memory: False
      input_size: 224
      test_resize: 256
      
      root_dir: '/mnt/cache/share/images/val/'
      meta_file: 'imagenet_info/val.json'
      # you can change it to imagenet_info relative path, file already in gitlab
      image_reader:
          type: pil
      sampler:
          type: distributed
      transforms:
          type: ONECROP
      evaluator:
          type: imagenet
          kwargs:
              topk: [1, 5]
      label_texts_ensemble: 'prompt1'
          
model:
  type: MultiLabelContrastive
  img_encoder:
    type: GroupViT
    embed_dim: 768  # small : 384; base: 768
    num_heads: [8, 8]  # small : [6, 6] 
    embed_factors: [1, 1]
    depths: [6, 6] # [6, 6]
    num_group_tokens: [32, 0]
    num_output_groups: [8]
    drop_rate: 0.1 # 0.1
    attn_drop_rate: 0.1 # 0.1
    drop_path_rate: 0.1 # 0.1
    no_patch_embed: true
    enc_steps: ${data.train.enc_steps}
    dec_steps: ${data.train.dec_steps}
    patch_norm: false
    use_direc_mask: true
    pre_proj: null # use one layer projection before the groupvit 
    imgnet_pretrained: null
    fixed: false
    imgnet_pretrained_checkpoint: '/mnt/petrelfs/heyinan/00_zqs/code/ovoad/models/pretrained_models/TimeSformer_divST_8x32_224_K600.pyth'
    # imgnet_pretrained: timesformer
    # fixed: true
    # imgnet_pretrained_checkpoint: '/mnt/petrelfs/heyinan/00_zqs/code/ovoad/models/pretrained_models/TimeSformer_divST_8x32_224_K600.pyth'
    # tune_config:
    #   ffn_adapt: true  # 'whether activate AdaptFormer'
    #   ffn_option: "serial" # two adapters after MHS and MLP
    #   ffn_adapter_layernorm_option: "none"
    #   ffn_adapter_init_option: "lora"
    #   ffn_adapter_scalar: "0.1"
    #   ffn_num: 128 # why?
    #   d_model: ${model.img_encoder.embed_dim}


  text_encoder:
    type: CLIPTransformer
    context_length: 77
    width: 512
    layers: 12
    vocab_size: 49408
    pretrained: true
    fixed: true
    ffn_adapt: true  # 'whether activate AdaptFormer'
    ffn_option: "parallel"
    ffn_adapter_layernorm_option: "none"
    ffn_adapter_init_option: "lora"
    ffn_adapter_scalar: "0.1"
    ffn_num: 64
  contrast_temperature: 0.07
  proj_num_layers: 2 # when -1 text projection must be used!! as 2 commit the text projection !!
  output_dim: 256
  multi_label: ${data.text_aug.multi_label}
  use_entityloss: false
  entity_weight: 1.0
  use_maskloss: false
  maskloss_weight: 1.0

  
train:
  epochs: 30
  base_lr: 6.4e-5
  warmup_lr: 1.6e-6 
  warmup_epochs: 2
  min_lr: 1.6e-5
  clip_grad: 5.0
checkpoint:
  auto_resume: false
  resume: null
  save_freq: 50
evaluate:
  eval_freq: 1
  oad:
    enc_steps: ${data.train.enc_steps}
    eval_type: "single" # set saliency probs
    single_eval: ${single_eval}
    datasets: [
      'thomus', 
      'tvseries',
      'epic',
      # 'anet',
      ]
    cfg: [
      'oad/configs/_base_/datasets/thomus14.py',
      'oad/configs/_base_/datasets/tvseries.py',
      'oad/configs/_base_/datasets/epic_verb.py', # class_type="verb_perframe"
      # 'oad/configs/_base_/datasets/anet.py',
      ]
    template: simple_kinectics  # full_kinectics, subset_kinectics, simple_imagenet, etc
  # oad:
  #   save_best: true
  #   out_dim768: true
  #   cfg: oad/configs/_base_/datasets/thomus14.py
  #   template: simple_kinectics  # full_kinectics, subset_kinectics, simple_imagenet, etc
